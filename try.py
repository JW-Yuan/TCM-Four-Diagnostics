# crc_table = [
#             0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83, 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41,
#             0x9d, 0xc3, 0x21, 0x7f, 0xf8, 0xa2, 0x40, 0x1e, 0x5b, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xd0,
#             0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0, 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62,
#             0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d, 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xf9,
#             0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5, 0x84, 0xda, 0x38, 0x66, 0xe5, 0xb6, 0x59, 0x07,
#             0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58, 0x19, 0x47, 0xa5, 0xf9, 0x78, 0x26, 0xc4, 0x9a,
#             0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6, 0xa7, 0x99, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24,
#             0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b, 0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9,
#             0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f, 0x4e, 0x10, 0x92, 0xac, 0x2f, 0x71, 0x93, 0xcd,
#             0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92, 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50,
#             0xaf, 0xf1, 0x13, 0x4d, 0xc0, 0x90, 0x72, 0x2c, 0x6d, 0x33, 0xf1, 0x8f, 0x0c, 0x52, 0xb0, 0xee,
#             0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1, 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73,
#             0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49, 0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b,
#             0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4, 0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16,
#             0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a, 0x25, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8,
#             0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35
#         ]

# crc_table = [0, 29, 58, 35, 116, 105, 78, 87, 232, 247, 216, 223, 156, 145, 170, 163, 205, 212, 245, 238, 173, 166, 149, 154, 37, 44, 27, 20, 85, 92, 107, 110, 142, 137, 162, 169, 221, 218, 249, 244, 90, 89, 100, 103, 18, 21, 46, 39, 165, 172, 139, 144, 236, 243, 214, 209, 42, 31, 22, 19, 94, 83, 112, 109, 211, 216, 241, 234, 147, 152, 167, 170, 25, 32, 41, 48, 81, 90, 101, 108, 239, 228, 213, 220, 159, 150, 165, 172, 114, 103, 84, 91, 22, 31, 42, 39, 246, 235, 222, 219, 148, 157, 174, 167, 34, 57, 28, 1, 86, 79, 104, 117, 226, 215, 240, 233, 155, 146, 171, 164, 43, 26, 45, 36, 93, 84, 111, 106, 175, 168, 147, 152, 231, 224, 217, 222, 102, 113, 82, 95, 20, 47, 30, 41, 242, 237, 210, 215, 151, 158, 173, 166, 96, 105, 80, 89, 40, 25, 48, 33, 161, 170, 143, 138, 225, 230, 219, 214, 107, 112, 83, 94, 38, 45, 20, 21, 169, 162, 137, 142, 223, 216, 249, 244, 87, 78, 105, 116, 35, 58, 29, 0]



def calculate_crc8(data,crc_table):
    crc = 0
    for byte in data:
        ind=crc ^ byte
        crc = crc_table[ind]
        # print(f"是crc表中的{ind}位，对应数字为{crc}")

    return crc


# hex_data = "aa5551030200f6"  # 十六进制字符串
# data = bytes.fromhex(hex_data)
# print(type(data[-1]))
# print(data[:-1])
# cal=calculate_crc8(data[:-1])
# print(type(cal))
# print(cal==data[-1])
# print(f'计算校验和{cal}\t正确校验和{data[-1]}')


def generate_crc8_ccitt_table(poly=0):
    # poly = 0x1D
    table = []
    for byte in range(256):
        crc = byte
        for _ in range(8):
            if crc & 0x80:
                crc = (crc << 1) ^ poly
            else:
                crc <<= 1
        table.append(crc & 0xFF)
    return table

# hex_data = "aa5551030200f6"  # 十六进制字符串
hex_data = "aa555103020834"
data = bytes.fromhex(hex_data)

for i in range(256):
    crc_table=generate_crc8_ccitt_table(i)

    # print(type(data[-1]))
    # print(data[:-1])
    cal=calculate_crc8(data[:-1],crc_table)
    # print(type(cal))
    print(f'计算校验和{cal}\t正确校验和{data[-1]}')
    if cal==data[-1]:
    # print()
        print("***************************************")
        print(f"找到对应的table,poly为{i}")
        print("***************************************")