class CRC8Calculator:
    def __init__(self):
        self.crc_table = [
            0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83, 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41,
            0x9d, 0xc3, 0x21, 0x7f, 0xf8, 0xa2, 0x40, 0x1e, 0x5b, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xd0,
            0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0, 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62,
            0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d, 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xf9,
            0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5, 0x84, 0xda, 0x38, 0x66, 0xe5, 0xb6, 0x59, 0x07,
            0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58, 0x19, 0x47, 0xa5, 0xf9, 0x78, 0x26, 0xc4, 0x9a,
            0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6, 0xa7, 0x99, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24,
            0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b, 0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9,
            0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f, 0x4e, 0x10, 0x92, 0xac, 0x2f, 0x71, 0x93, 0xcd,
            0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92, 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50,
            0xaf, 0xf1, 0x13, 0x4d, 0xc0, 0x90, 0x72, 0x2c, 0x6d, 0x33, 0xf1, 0x8f, 0x0c, 0x52, 0xb0, 0xee,
            0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1, 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73,
            0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49, 0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b,
            0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4, 0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16,
            0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a, 0x25, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8,
            0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35
        ]

    def calculate_crc8(self, data):
        crc = 0x00
        for byte in data:
            crc = self.crc_table[(crc ^ byte) & 0xFF]
        return crc

# 示例数据，这里仅取前面几条数据，你可以根据需要调整
data_list = [
bytearray(b'\xaaUR\x03\x014\xf4'),
bytearray(b'\xaaUR\x03\x011\xcb'),
bytearray(b'\xaaUR\x03\x01-\xf5'),
bytearray(b'\xaaUR\x03\x01)\x94'),
bytearray(b'\xaaUR\x03\x01%7'),
bytearray(b'\xaaUR\x03\x01"\xb4'),
bytearray(b'\xaaUR\x03\x01\x1e\xa9'),
bytearray(b'\xaaUR\x03\x01\x1c\x15'),
bytearray(b'\xaaUR\x03\x01\x1a\xc8'),
bytearray(b'\xaaUR\x03\x01\x18t'),
bytearray(b'\xaaUS\x07\x01\x00\x00\x00\x00\x042'),
bytearray(b'\xaaUR\x03\x01\x175'),
bytearray(b'\xaaUR\x03\x01\x16k'),
bytearray(b'\xaaUR\x03\x01\x16k'),
bytearray(b'\xaaUR\x03\x01\x15\x89'),
bytearray(b'\xaaUR\x03\x01\x15\x89'),
bytearray(b'\xaaUR\x03\x01\x15\x89'),
bytearray(b'\xaaUR\x03\x01\x16k'),
bytearray(b'\xaaUR\x03\x01\x1b\x96'),
bytearray(b'\xaaUR\x03\x01&\xd5'),
bytearray(b'\xaaUR\x03\x016H'),
bytearray(b'\xaaUR\x03\x01I\xf1'),
bytearray(b'\xaaUR\x03\x01[\xd0'),
bytearray(b'\xaaUR\x03\x01i\xd2'),
bytearray(b'\xaaUR\x03\x01p\xd3'),
bytearray(b'\xaaUR\x03\x01q\x8d'),
bytearray(b'\xaaUR\x03\x01o\x0f'),
bytearray(b'\xaaUR\x03\x01j0'),
bytearray(b'\xaaUR\x03\x01d/'),
bytearray(b'\xaaUR\x03\x01\xdec'),
bytearray(b'\xaaUR\x03\x01V-'),
bytearray(b'\xaaUR\x03\x01O,'),
bytearray(b'\xaaUR\x03\x01H\xaf'),
bytearray(b'\xaaUR\x03\x01B\xd1'),
bytearray(b'\xaaUR\x03\x01=h'),
bytearray(b'\xaaUR\x03\x01;\xb5'),
bytearray(b'\xaaUR\x03\x019\t'),
bytearray(b'\xaaUR\x03\x017\x16'),
bytearray(b'\xaaUR\x03\x015\xaa'),
bytearray(b'\xaaUR\x03\x013w'),
bytearray(b'\xaaUR\x03\x01/I'),
bytearray(b'\xaaUR\x03\x01+('),
bytearray(b"\xaaUR\x03\x01\'\x8b"),
bytearray(b'\xaaUR\x03\x01#\xea'),
bytearray(b'\xaaUR\x03\x01\x1f\xf7'),
bytearray(b'\xaaUR\x03\x01\x1b\x96'),
bytearray(b'\xaaUR\x03\x01\x18t'),
bytearray(b'\xaaUR\x03\x01\x16k'),
bytearray(b'\xaaUR\x03\x01\x14\xd7'),
bytearray(b'\xaaUR\x03\x01\x13T'),
bytearray(b'\xaaUR\x03\x01\x11\xe8'),
bytearray(b'\xaaUR\x03\x01\x10\xb6'),
bytearray(b'\xaaUR\x03\x01\x10\xb6'),
bytearray(b'\xaaUR\x03\x01\x0fj'),
bytearray(b'\xaaUR\x03\x01\x0fj'),
bytearray(b'\xaaUR\x03\x01\x0fj'),
bytearray(b'\xaaUR\x03\x01\x0fj'),
bytearray(b'\xaaUR\x03\x01\x0e4'),
bytearray(b'\xaaUR\x03\x01\x0e4'),
bytearray(b'\xaaUR\x03\x01\r\xd6'),
bytearray(b'\xaaUR\x03\x01\x0c\x88'),
bytearray(b'\xaaUS\x07\x01\x00\x00\x00\x00\x042'),
bytearray(b'\xaaUR\x03\x01\x0e4'),
bytearray(b'\xaaUR\x03\x01\x15\x89'),
bytearray(b'\xaaUR\x03\x01"\xb4'),
bytearray(b'\xaaUR\x03\x012)'),
bytearray(b'\xaaUR\x03\x01ER'),
bytearray(b'\xaaUR\x03\x01U\xcf'),
bytearray(b'\xaaUR\x03\x01a\x10'),
bytearray(b'\xaaUR\x03\x01f\x93'),
bytearray(b'\xaaUR\x03\x01g\xcd'),
bytearray(b'\xaaUR\x03\x01eq'),
bytearray(b'\xaaUR\x03\x01a\x10'),
bytearray(b'\xaaUR\x03\x01\xdd\x81'),
bytearray(b'\xaaUR\x03\x01X2'),
bytearray(b'\xaaUR\x03\x01RL'),
bytearray(b'\xaaUR\x03\x01L\xce'),
bytearray(b'\xaaUR\x03\x01F\xb0'),
bytearray(b'\xaaUR\x03\x01A3'),
bytearray(b'\xaaUR\x03\x01=h'),
bytearray(b'\xaaUR\x03\x01;\xb5'),
bytearray(b'\xaaUR\x03\x019\t'),
bytearray(b'\xaaUR\x03\x017\x16'),
bytearray(b'\xaaUR\x03\x015\xaa'),
bytearray(b'\xaaUR\x03\x013w'),
bytearray(b'\xaaUR\x03\x010\x95'),
bytearray(b'\xaaUR\x03\x01-\xf5'),
bytearray(b'\xaaUR\x03\x01)\x94'),
bytearray(b'\xaaUR\x03\x01&\xd5'),
bytearray(b'\xaaUR\x03\x01#\xea'),
bytearray(b'\xaaUR\x03\x01!V'),
bytearray(b'\xaaUR\x03\x01\x1f\xf7'),
bytearray(b'\xaaUR\x03\x01\x1dK'),
bytearray(b'\xaaUR\x03\x01\x1c\x15'),
bytearray(b'\xaaUR\x03\x01\x1b\x96'),
bytearray(b'\xaaUR\x03\x01\x1a\xc8'),
bytearray(b'\xaaUR\x03\x01\x18t'),
bytearray(b'\xaaUR\x03\x01\x175'),
bytearray(b'\xaaUR\x03\x01\x175'),
bytearray(b'\xaaUR\x03\x01\x16k'),
bytearray(b'\xaaUR\x03\x01\x16k'),
bytearray(b'\xaaUR\x03\x01\x16k'),
bytearray(b'\xaaUR\x03\x01\x175'),
bytearray(b'\xaaUR\x03\x01\x16k'),
bytearray(b'\xaaUR\x03\x01\x15\x89'),
bytearray(b'\xaaUR\x03\x01\x15\x89'),
bytearray(b'\xaaUR\x03\x01\x15\x89'),
bytearray(b'\xaaUR\x03\x01\x1a\xc8'),
bytearray(b'\xaaUR\x03\x01$i'),
bytearray(b'\xaaUR\x03\x012)'),
bytearray(b'\xaaUR\x03\x01C\x8f'),
bytearray(b'\xaaUR\x03\x01S\x12'),
bytearray(b'\xaaUS\x07\x01bQ\x00\x00\x00\x96'),
bytearray(b'\xaaUR\x03\x01_\xb1'),
bytearray(b'\xaaUR\x03\x01eq'),
bytearray(b'\xaaUR\x03\x01f\x93'),
bytearray(b'\xaaUR\x03\x01c\xac'),
bytearray(b'\xaaUR\x03\x01^\xef'),
bytearray(b'\xaaUR\x03\x01\xd9\xe0'),
bytearray(b'\xaaUR\x03\x01S\x12'),
bytearray(b'\xaaUR\x03\x01M\x90'),
bytearray(b'\xaaUR\x03\x01F\xb0'),
bytearray(b'\xaaUR\x03\x01A3'),
bytearray(b'\xaaUR\x03\x01<6'),
bytearray(b'\xaaUR\x03\x019\t'),
bytearray(b'\xaaUR\x03\x018W'),
bytearray(b'\xaaUR\x03\x019\t'),
bytearray(b'\xaaUR\x03\x019\t'),
bytearray(b'\xaaUR\x03\x018W'),
bytearray(b'\xaaUR\x03\x017\x16'),
bytearray(b'\xaaUR\x03\x015\xaa'),
bytearray(b'\xaaUR\x03\x012)'),
bytearray(b'\xaaUR\x03\x01/I'),
bytearray(b'\xaaUR\x03\x01,\xab'),
bytearray(b'\xaaUR\x03\x01)\x94'),
bytearray(b'\xaaUR\x03\x01&\xd5'),
bytearray(b'\xaaUR\x03\x01#\xea'),
bytearray(b'\xaaUR\x03\x01!V'),
bytearray(b'\xaaUR\x03\x01\x1e\xa9'),
bytearray(b'\xaaUR\x03\x01\x1dK'),
bytearray(b'\xaaUR\x03\x01\x1b\x96'),
bytearray(b'\xaaUR\x03\x01\x1a\xc8'),
bytearray(b'\xaaUR\x03\x01\x1a\xc8'),
bytearray(b'\xaaUR\x03\x01\x19*'),
    # 这里省略了其他数据，你可以补充完整
]

crc_calculator = CRC8Calculator()
for data in data_list:
    expected_crc = data[-1]  # 假设最后一个字节是校验和
    calculated_crc = crc_calculator.calculate_crc8(data[:-1])
    if calculated_crc == expected_crc:
        print(f"数据包 {data} 的CRC校验通过")
    else:
        print(f"数据包 {data} 的CRC校验失败，计算值: {hex(calculated_crc)}, 预期值: {hex(expected_crc)}")